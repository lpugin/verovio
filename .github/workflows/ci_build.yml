name: Verovio CI Build

on:
  push:
    # Trigger the workflow on push,
    # but only for the branches specified
    branches:
      # Push events on develop branch
      - develop
      # Push events on ci-test branch (uncomment if needed for testing purposes)
      - ci-test

# globals
env:
  # general settings
  MAIN_REPO_OWNER: rism-ch      # Main repo owner (default: rism-ch; should not be changed)
                                # If changed, owner needs deploy permission to <owner>/verovio.org and <owner>/verovio-doxygen (cf. Deploy jobs).
                                # DISABLE_DEPLOY_STEPS & IS_DRY_RUN are programmatically set to false for main repo owner.

  DISABLE_DEPLOY_STEPS: true    # Flag used to disable deploy steps at all (default: true).
                                # TRUE (no matter what IS_DRY_RUN): Will skip deploy steps of the workflow.
                                # FALSE (together with IS_DRY_RUN = true): Will allow to run deploy steps in dry-run mode.
                                # FALSE (together with IS_DRY_RUN = false): Will allow to deploy/git push from fork.
                                # Will be programmatically set to 'false' for rism-ch repo.

  IS_DRY_RUN: true              # Flag used for dry-run mode in 'git push' command (default: true).
                                # TRUE (needs DISABLE_DEPLOY_STEPS = false): Will allow to run deploy steps in dry-run mode.
                                # FALSE (needs DISABLE_DEPLOY_STEPS = false): Will allow to deploy/git push from fork.
                                # Will be programmatically set to 'false' for rism-ch repo.

  # build artifacts
  CLI_BUILD: cli-build
  DOC_BUILD: doc-build
  TOOLKIT_BUILD: toolkit-build

  # doxygen
  DOXYGEN_REPO: ${{ github.repository_owner }}/verovio-doxygen # works from rism-ch and from forks
  DOXYGEN_BRANCH: master

  # emscripten
  EMSCRIPTEN_VERSION: latest
  EMSCRIPTEN_CACHE_FOLDER: emsdk-cache

  # gh-pages
  GH_PAGES_REPO: ${{ github.repository_owner }}/verovio.org  # works from rism-ch and from forks
  GH_PAGES_BRANCH: gh-pages

  # temporary directories
  DOXYGEN_DIR: doxygen-dir
  GH_PAGES_DIR: gh-pages-dir
  TEMP_DIR: temp-dir



jobs:
  #####################################
  # Set up and cache emscripten build #
  #####################################
  setup_emscripten:
    name: Set up and cache emscripten
    runs-on: ubuntu-20.04

    steps:
      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          # path for cache
          path: ${{ env.EMSCRIPTEN_CACHE_FOLDER }}-${{ github.run_id }}
          # key for cache
          key: ${{ runner.os }}-emsdk-${{ env.EMSCRIPTEN_VERSION }}-${{ github.run_id }}

      # Set up emsdk
      - name: Set up emsdk
        uses: mymindstorm/setup-emsdk@v7
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: ${{ env.EMSCRIPTEN_CACHE_FOLDER }}-${{ github.run_id }}
          no-cache: true

      - name: Verify emscripten build
        run: emcc -v


  ##################################
  # Build the JS toolkit artifacts #
  ##################################
  build_js:
    name: Build JS toolkit
    runs-on: ubuntu-20.04
    needs: [setup_emscripten]

    # set matrix with toolkit options (runs the following steps for every target in parallel)
    strategy:
      matrix:
        toolkit:
          - target: nohumdrum
            message: "Building toolkit without humdrum"
            options: "-c -H -M"
            filepath: "verovio-toolkit.js*"
          - target: light
            message: "Building toolkit without humdrum as light version"
            options: "-c -H -l -M"
            filepath: "verovio-toolkit-light.js*"
          - target: wasm
            message: "Building toolkit without humdrum as wasm"
            options: "-c -H -w -M"
            filepath: "verovio*wasm*"
          - target: default
            message: "Building default toolkit (with humdrum)"
            options: "-c -M"
            filepath: "*-hum.js*"

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Create TEMP_DIR
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p $TEMP_DIR/

      # Restore system libraries generated during build time from cache
      - name: Restore cache
        id: restore_cache
        uses: actions/cache@v2
        with:
          # path for cache
          path: ${{ env.EMSCRIPTEN_CACHE_FOLDER }}-${{ github.run_id }}
          # key for cache
          key: ${{ runner.os }}-emsdk-${{ env.EMSCRIPTEN_VERSION }}-${{ github.run_id }}

      # Install and/or activate emsdk
      - name: Set up emsdk (cache not found)
        uses: mymindstorm/setup-emsdk@v7
        if: steps.restore_cache.outputs.cache-hit != 'true'
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          no-cache: true
      - name: Set up emsdk (cache found)
        if: steps.restore_cache.outputs.cache-hit == 'true'
        uses: mymindstorm/setup-emsdk@v7
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: ${{ env.EMSCRIPTEN_CACHE_FOLDER }}-${{ github.run_id }}
          no-cache: true

      - name: Verify emscripten build
        run: emcc -v

      - name: Build toolkit (${{ matrix.toolkit.target }}) with options ${{ matrix.toolkit.options }}
        working-directory: ${{ github.workspace }}/emscripten
        run: |
          echo "${{ matrix.toolkit.message }}"
          ./buildToolkit ${{ matrix.toolkit.options }}

      - name: Copy build into TEMP_DIR
        working-directory: ${{ github.workspace }}/emscripten
        run: |
          echo "Copy toolkit build into $TEMP_DIR..."
          cp build/${{ matrix.toolkit.filepath }} $GITHUB_WORKSPACE/$TEMP_DIR/

      - name: Upload js build artifact (${{ matrix.toolkit.target }})
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TOOLKIT_BUILD }}
          path: ${{ github.workspace }}/${{ env.TEMP_DIR }}/${{ matrix.toolkit.filepath }}

      - name: Check files
        if: always()
        working-directory: ${{ github.workspace }}/${{ env.TEMP_DIR }}
        run: |
          pwd
          ls -al


