name: Verovio CI Build

on:
  push:
    # Trigger the workflow on push,
    # but only for the branches specified
    branches:
      # Push events on develop branch
      - develop
      # Push events on ci-test branch (uncomment if needed for testing purposes)
      - '**'

# globals
env:
  # general settings
  MAIN_REPO_OWNER: rism-ch    # Main repo owner (default: rism-ch)
                                     # Needs deploy permission to <owner>/verovio.org and <owner>/verovio-doxygen (cf. Deploy jobs).
                                     # DISABLE_DEPLOY_STEPS & IS_DRY_RUN are programmatically set to false for main repo owner.

  DISABLE_DEPLOY_STEPS: true    # Flag used to disable deploy steps at all (default: true).
                                # TRUE (no matter what IS_DRY_RUN): Will skip deploy steps of the workflow.
                                # FALSE (together with IS_DRY_RUN = true): Will allow to run deploy steps in dry-run mode.
                                # FALSE (together with IS_DRY_RUN = false): Will allow to deploy/git push from fork.
                                # Will be programmatically set to 'false' for rism-ch repo.

  IS_DRY_RUN: true              # Flag used for dry-run mode in 'git push' command (default: true).
                                # TRUE (needs DISABLE_DEPLOY_STEPS = false): Will allow to run deploy steps in dry-run mode.
                                # FALSE (needs DISABLE_DEPLOY_STEPS = false): Will allow to deploy/git push from fork.
                                # Will be programmatically set to 'false' for rism-ch repo.

  # build artifacts
  CLI_BUILD: cli-build
  DOC_BUILD: doc-build
  TOOLKIT_BUILD: toolkit-build

  # doxygen
  DOXYGEN_REPO: ${{ github.repository_owner }}/verovio-doxygen # works from rism-ch and from forks
  DOXYGEN_BRANCH: master

  # emscripten
  EMSCRIPTEN_VERSION: latest
  EMSCRIPTEN_CACHE_FOLDER: emsdk-cache

  # gh-pages
  GH_PAGES_REPO: ${{ github.repository_owner }}/verovio.org  # works from rism-ch and from forks
  GH_PAGES_BRANCH: gh-pages

  # temporary directories
  DOXYGEN_DIR: doxygen-dir
  GH_PAGES_DIR: gh-pages-dir
  TEMP_DIR: temp-dir


jobs:

  ###########################
  # Build test artifact #
  ###########################
  build_cli:
    name: Build cli
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Create temp dir
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p $TEMP_DIR/
          pwd
          ls -al

      - name: Update cli.txt
        working-directory: ${{ github.workspace }}/${{ env.TEMP_DIR }}
        run: |
          pwd
          ls -al
          echo "Test" > $GITHUB_WORKSPACE/$TEMP_DIR/cli.txt

      - name: Upload cli artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.CLI_BUILD }}
          path: ${{ github.workspace }}/${{ env.TEMP_DIR }}/cli.txt

      - name: Check files
        if: always()
        working-directory: ${{ github.workspace }}/${{ env.TEMP_DIR }}
        run: |
          pwd
          ls -al


  ##################################
  # Check settings for deployment  #
  ##################################
  check_deploy_settings:
    name: Check settings for deployment
    runs-on: ubuntu-20.04
    # run deployment only after finishing the build jobs
    # needs: [ build_cpp, build_cli, build_js ]
    needs: [ build_cli ]

    # Github Environment Variables persist only on job level.
    # To transfer values to later jobs, outputs mechanism has to be used.
    # Cf. https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idoutputs
    # So global envs are reset here as outputs.
    outputs:
      DISABLE_DEPLOY_STEPS: ${{ steps.settings.outputs.DISABLE_DEPLOY_STEPS }}
      IS_DRY_RUN: ${{ steps.settings.outputs.IS_DRY_RUN }}

    steps:
      - name: Enable deployment for main repo owner
        if: ${{ github.repository_owner == env.MAIN_REPO_OWNER }}
        run: |
          echo "Enable deploy steps for main repo owner..."
          echo "DISABLE_DEPLOY_STEPS=false" >> $GITHUB_ENV

          echo "Disabling dry-run mode for main repo owner..."
          echo "IS_DRY_RUN=false" >> $GITHUB_ENV

      - name: Check deployment settings and set them as outputs
        id: settings
        run: |
          echo "DISABLE_DEPLOY_STEPS = ${DISABLE_DEPLOY_STEPS}"
          echo "IS_DRY_RUN = ${IS_DRY_RUN}"

          echo "::set-output name=DISABLE_DEPLOY_STEPS::${DISABLE_DEPLOY_STEPS}"
          echo "::set-output name=IS_DRY_RUN::${IS_DRY_RUN}"

  #########################################
  # Deploy the toolkit builds to gh-pages #
  #########################################
  deploy_toolkit:
    name: Deploy JS toolkit
    runs-on: ubuntu-20.04
    if: ${{ needs.check_deploy_settings.outputs.DISABLE_DEPLOY_STEPS == 'false' }}
    # run deployment only after finishing the build jobs
    # needs: [build_cpp, build_cli, build_js, check_deploy_settings]
    needs: [build_cli, check_deploy_settings]

    steps:
      - name: Checkout GH_PAGES_REPO into GH_PAGES_DIR
        uses: actions/checkout@v2
        with:
          # repository to check out
          repository: ${{ env.GH_PAGES_REPO }}
          # Deploy key as secret for accessing <owner>/<GH_PAGES_REPO>;
          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751
          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY }}
          # ref (branch, tag or SHA) to check out
          ref: ${{ env.GH_PAGES_BRANCH }}
          # relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ env.GH_PAGES_DIR }}

      - name: Download CLI_BUILD artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.CLI_BUILD }}
          path: artifacts/${{ env.CLI_BUILD }}

#      - name: Download TOOLKIT_BUILD artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.TOOLKIT_BUILD }}
#          path: artifacts/${{ env.TOOLKIT_BUILD }}

      - name: Copy artifacts to gh-pages
        run: |
          cp artifacts/$CLI_BUILD/cli.txt $GH_PAGES_DIR/_includes/
          # cp artifacts/$TOOLKIT_BUILD/* $GH_PAGES_DIR/javascript/develop/

      - name: Check git status before commit
        working-directory: ${{ env.GH_PAGES_DIR }}
        run: |
          git config --get remote.origin.url
          git status

      - name: Configure git
        working-directory: ${{ env.GH_PAGES_DIR }}
        run: |
          echo "Configuring git"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit files
        working-directory: ${{ env.GH_PAGES_DIR }}
        run: |
          echo "Running git commit"
          git add .
          git commit -m "Auto-commit of toolkit build for ${{ github.repository }}@${{ github.sha }}"

      #      - name: Check git status after commit
      #        if: ${{ env.DISABLE_DEPLOY_STEPS == 'false' }}
      #        working-directory: ${{ env.GH_PAGES_DIR }}
      #        run: |
      #          git config --get remote.origin.url
      #          git status

      - name: Push changes to gh-pages (dry-run)
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'true' }}
        working-directory: ${{ env.GH_PAGES_DIR }}
        run: |
          # Push all changes in one commit to the gh-pages repo
          echo "Build branch ready to go."

          echo "Running git in dry-run mode..."
          git push -v --dry-run origin HEAD:$GH_PAGES_BRANCH

      - name: Push changes to gh-pages
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'false' }}
        working-directory: ${{ env.GH_PAGES_DIR }}
        run: |
          # Push all changes in one commit to the gh-pages repo
          echo "Build branch ready to go."

          echo "Pushing to Github..."
          git push origin HEAD:$GH_PAGES_BRANCH

      - name: Congratulations
        if: ${{ success() && needs.check_deploy_settings.outputs.IS_DRY_RUN == 'false' }}
        run: |
          echo "ðŸŽ‰ New JS toolkit builds deployed ðŸŽŠ"

      - name: Skipped
        # skip deployment when deploy steps are disabled or when we are in dry-run mode
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'true' }}
        run: |
          echo "Deploy job skipped due to deployment settings..."

          echo "DISABLE_DEPLOY_STEPS = ${DISABLE_DEPLOY_STEPS}"
          echo "IS_DRY_RUN = ${IS_DRY_RUN}"


  ###################################
  # Build the doxygen documentation #
  ###################################
  build_docs:
    name: Build documentation
    runs-on: ubuntu-20.04
    # run only after finishing other build jobs
    # needs: [build_cpp, build_cli, build_js]
    needs: [build_cli]

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v2

      - name: Install doxygen
        run: |
          sudo apt-get update -q
          sudo apt-get install -y --no-install-recommends doxygen

      - name: Check installation
        run: |
          doxygen --help

      - name: Upgrade doxygen conf
        working-directory: ${{ github.workspace }}/doc
        run: doxygen -u verovio.conf

      - name: Build documentation with (updated) doxygen conf
        working-directory: ${{ github.workspace }}/doc
        if: ${{ success() }}
        run: (cat verovio.conf ; echo "OUTPUT_DIRECTORY = $GITHUB_WORKSPACE/$DOXYGEN_DIR") | doxygen -

      - name: Upload doxygen build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DOC_BUILD }}
          path: ${{ github.workspace }}/${{ env.DOXYGEN_DIR }}

      - name: Check files
        working-directory: ${{ github.WORKSPACE }}/${{ env.DOXYGEN_DIR }}
        if: always()
        run: |
          pwd
          ls -al
          ls -R


  ###############################################
  # Deploy the documentation to verovio-doxygen #
  ###############################################
  deploy_docs:
    name: Deploy documentation
    runs-on: ubuntu-20.04
    if: ${{ needs.check_deploy_settings.outputs.DISABLE_DEPLOY_STEPS == 'false' }}
    # run deployment only after finishing the build job
    needs: [build_docs, check_deploy_settings]

    steps:
      - name: Checkout DOXYGEN_REPO into DOXYGEN_DIR
        uses: actions/checkout@v2
        with:
          # repository to check out
          repository: ${{ env.DOXYGEN_REPO }}
          # Deploy key as secret for accessing <owner>/<DOXYGEN_REPO>;
          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751
          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_DOXYGEN }}
          # ref (branch, tag or SHA) to check out
          ref: ${{ env.DOXYGEN_BRANCH }}
          # relative path under $GITHUB_WORKSPACE to place the repository
          path: ${{ env.DOXYGEN_DIR }}


      - name: Download DOC_BUILD artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOC_BUILD }}
          path: artifacts/${{ env.DOC_BUILD }}

      - name: Copy build artifacts to DOXYGEN_DIR
        run: |
          cp -a artifacts/$DOC_BUILD/* $DOXYGEN_DIR/

      - name: Check git status before commit
        working-directory: ${{ env.DOXYGEN_DIR }}
        run: |
          git config --get remote.origin.url
          git status

      - name: Configure git
        working-directory: ${{ env.DOXYGEN_DIR }}
        run: |
          echo "Configuring git..."
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit files
        working-directory: ${{ env.DOXYGEN_DIR }}
        run: |
          echo "Running git commit..."
          git add .
          git commit -m "Auto-commit of documentation build for ${{ github.repository }}@${{ github.sha }}"

      #      - name: Check git status after commit
      #        working-directory: ${{ env.DOXYGEN_DIR }}
      #        run: |
      #          git config --get remote.origin.url
      #          git status

      - name: Push changes to doxygen (dry-run)
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'true' }}
        working-directory: ${{ env.DOXYGEN_DIR }}
        run: |
          # Push all changes in one commit to the doxygen repo
          echo "Build branch ready to go."

          echo "Running git in dry-run mode..."
          git push -v --dry-run origin HEAD:$DOXYGEN_BRANCH

      - name: Push changes to doxygen
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'false' }}
        working-directory: ${{ env.DOXYGEN_DIR }}
        run: |
          # Push all changes in one commit to the doxygen repo
          echo "Build branch ready to go."

          echo "Pushing to Github..."
          git push origin HEAD:$DOXYGEN_BRANCH

      - name: Congratulations
        if: ${{ success() && needs.check_deploy_settings.outputs.IS_DRY_RUN == 'false' }}
        run: |
          echo "ðŸŽ‰ New documentation deployed ðŸŽŠ"

      - name: Skipped
        # skip deployment when deploy steps are disabled or when we are in dry-run mode
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'true' }}
        run: |
          echo "Deploy job skipped due to deployment settings..."

          echo "DISABLE_DEPLOY_STEPS = ${DISABLE_DEPLOY_STEPS}"
          echo "IS_DRY_RUN = ${IS_DRY_RUN}"

  ###############################################
  # Skip deployment steps according to settings #
  ###############################################
  skip_deploy:
    name: Skip deployment if set (needs build_cli, check_deploy_settings)
    runs-on: ubuntu-20.04
    if: ${{ needs.check_deploy_settings.outputs.DISABLE_DEPLOY_STEPS == 'true' }}
    # run deployment only after finishing the build job
    needs: [ build_cli, check_deploy_settings ]

    steps:
      - name: Skipped
        # skip deployment when deploy steps are disabled or when we are in dry-run mode
        if: ${{ needs.check_deploy_settings.outputs.IS_DRY_RUN == 'true' }}
        run: |
          echo "Deploy job skipped due to deployment settings..."

          echo "DISABLE_DEPLOY_STEPS = ${DISABLE_DEPLOY_STEPS}"
          echo "IS_DRY_RUN = ${IS_DRY_RUN}"

  skip_deploy_2:
    name: Skip deployment if set (needs check_deploy_settings)
    runs-on: ubuntu-20.04
    if: ${{ needs.check_deploy_settings.outputs.DISABLE_DEPLOY_STEPS == 'true' }}
    # run deployment only after finishing the build job
    needs: [ check_deploy_settings ]

    steps:
      - name: Skipped
        run: |
          echo "Deploy jobs skipped due to deployment settings..."

          echo "DISABLE_DEPLOY_STEPS: true"
          echo "IS_DRY_RUN: ${needs.check_deploy_settings.outputs.IS_DRY_RUN}"
